import { Subject } from 'rxjs';
import { first as first_, tap } from 'rxjs/operators';
export class ContentManager {
    constructor() {
        this.messages = [];
        this.revision = 0;
        this.visibleRevision = 0;
        this.inputs = new Subject();
        this.updated = new Subject();
        this.inputEnabled = false;
        this.textArea = false;
        this.inputKind = 'text';
        this.placeholder = '';
        this.validator = null;
        this.fastScroll = false;
        this.scrollLock = false;
        this.fixme = null;
        this.debug = false;
        this.sendButtonText = 'Send';
        this.inputPlaceholder = 'Type something...';
        this.uploadFileText = 'Upload File...';
        this.uploadedFileText = 'Uploaded Successfully';
        this.notUploadedFileText = 'Failed to upload file';
        this.fixmeMessage = 'Fix';
        this.timeout = 1000;
        this.toQueue = [];
    }
    clear() {
        this.messages = [];
        this.toQueue = [];
    }
    reportValue(value) {
        this.inputs.next(value);
    }
    reportUpdated(value) {
        if (this.debug) {
            console.log('CONTENT UPDATED', this.timeout);
        }
        if (this.timeout) {
            window.setTimeout(() => {
                this.updated.next(value);
            }, this.timeout);
        }
    }
    add(kind, params) {
        const first = (this.messages.length === 0 ||
            kind !== this.messages[this.messages.length - 1].kind);
        const revision = this.revision;
        this.messages.push({ kind, params, first, revision });
    }
    queue(kind, params) {
        this.toQueue.push({ kind, params });
        if (this.toQueue.length === 1) {
            this.typing();
        }
    }
    queueFunction(callable) {
        return new Promise((resolve) => {
            this.queue('function', { callable, resolve });
        });
    }
    typing() {
        if (this.debug) {
            console.log('TYPING, queue len=' + this.toQueue.length);
        }
        if (this.toQueue.length > 0) {
            const item = this.toQueue[0];
            if (this.debug) {
                console.log('item=', item);
            }
            if (item.kind === 'function') {
                if (this.debug) {
                    console.log('RUNNING FUNCTION', item);
                }
                this.toQueue.shift();
                const future = item.params.callable();
                future.then((result) => {
                    if (this.debug) {
                        console.log('FUNCTION RESOLVED to', result, item);
                    }
                    item.params.resolve(result);
                    this.typing();
                });
            }
            else {
                this.add('typing', null);
                const callback = () => {
                    this.toQueue.shift();
                    if (this.debug) {
                        console.log('handling item=', item);
                    }
                    this.replace(item.kind, item.params);
                    this.typing();
                };
                let timeout = this.timeout;
                if (this.toQueue.length > 0) {
                    let stepTimeout = this.toQueue[0].params.timeout;
                    if (stepTimeout || stepTimeout === 0) {
                        timeout = stepTimeout;
                    }
                }
                if (timeout === 0) {
                    callback();
                }
                else {
                    window.setTimeout(() => {
                        callback();
                        this.reportUpdated(item);
                    }, timeout);
                }
            }
        }
        else {
            window.setTimeout(async () => {
                this.reportUpdated(null);
            }, this.timeout);
        }
    }
    replace(kind, params) {
        const first = (this.messages.length < 2 || kind !== this.messages[this.messages.length - 2].kind);
        this.messages[this.messages.length - 1] = { kind, params, first };
    }
    addFrom(message) {
        this.add('from', { message, fixme: this.fixme, fixmeMessage: this.fixmeMessage });
    }
    reportInput(value) {
        this.reportValue(value);
        this.reportUpdated(value);
        this.textArea = false;
        this.placeholder = '';
        this.validator = null;
    }
    queueFrom(message, timeout) {
        this.queue('from', { message, fixme: this.fixme, fixmeMessage: this.fixmeMessage, timeout });
    }
    addTo(message, timeout) {
        this.queue('to', { message, timeout });
    }
    addOptions(message, options, selected, multi) {
        if (message) {
            this.queue('to', { message });
        }
        this.queue('options', { options, selected, multi, fixme: this.fixme, fixmeMessage: this.fixmeMessage });
    }
    addUploader(message, options) {
        if (message) {
            this.queue('to', { message });
        }
        this.queue('uploader', options);
    }
    addCustomComponent(step, wait, timeout) {
        return new Promise((componentCreatedCallback) => {
            this.queue('component', {
                step,
                timeout,
                componentCreatedCallback: () => {
                    if (this.debug) {
                        console.log('CUSTOM COMPONENT CREATED', step);
                    }
                    return componentCreatedCallback();
                }
            });
        }).then(() => {
            if (wait) {
                return this.queueFunction(() => {
                    return step.__instance.wait();
                });
            }
            else {
                return;
            }
        });
    }
    setTextArea() {
        this.textArea = true;
    }
    setInputKind(kind, required, min, max, step) {
        this.inputKind = kind || 'text';
        this.inputRequired = !!required,
            this.inputMin = min === undefined ? null : min;
        this.inputMax = max === undefined ? null : max;
        this.inputStep = step === undefined ? null : step;
    }
    setInputSuggestions(suggestions) {
        this.inputSuggestions = suggestions;
    }
    setPlaceholder(placeholder) {
        this.placeholder = placeholder;
    }
    setValidator(validator) {
        this.validator = validator;
    }
    setFixme(fixme) {
        this.fixme = fixme;
    }
    setFastScroll(value) {
        this.fastScroll = value;
    }
    setScrollLock(value) {
        if (this.scrollLock !== value) {
            this.scrollLock = value;
            if (value) {
                this.revision += 1;
            }
            else {
                this.visibleRevision = this.revision;
                if (this.debug) {
                    console.log('SETTING VISIBLE REVISION', this.visibleRevision, 'LAST MESSAGE', this.messages[this.messages.length - 1]);
                }
            }
        }
    }
    async waitForInput(enableTextInput) {
        enableTextInput = (enableTextInput !== false);
        let activeElement = null;
        if (enableTextInput) {
            await this.queueFunction(async () => {
                if (this.debug) {
                    console.log('ENABLING INPUT');
                }
                activeElement = document.activeElement;
                this.inputEnabled = true;
            });
        }
        return this.inputs.pipe(first_(), tap((value) => {
            if (this.debug) {
                console.log('DISABLING INPUT, value=', value);
            }
            this.inputEnabled = false;
            console.log('FOCUSING', activeElement);
            activeElement?.focus();
        })).toPromise();
    }
    setQueueTimeout(timeout) {
        let report = false;
        if (this.timeout === 0 && timeout !== 0) {
            report = true;
        }
        this.timeout = timeout;
        if (report) {
            this.reportUpdated(null);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,