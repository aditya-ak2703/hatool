import { CBType } from './script-runner-types';
import { HttpClient } from '@angular/common/http';
import { ContentManager } from './content-manager';
import { ScriptRunner } from './script-runner';
import { Observable } from 'rxjs';
export declare class ScriptRunnerImpl implements ScriptRunner {
    private http;
    private content;
    private locale;
    private customComponents;
    record: {};
    context: {};
    snippets: any;
    setCallback: CBType;
    runFastInternal: boolean;
    lastMessage: string;
    debug: boolean;
    fixme: () => void;
    RETURN: number;
    COMPLETE: number;
    BREAK: number;
    state: {};
    TIMEOUT: number;
    constructor(http: HttpClient, content: ContentManager, locale: string, customComponents?: any[]);
    set timeout(value: any);
    set runFast(value: boolean);
    get runFast(): boolean;
    registerCustomComponents(customComponents: any[]): void;
    i18n(obj: any): any;
    get(obj: any, field: any): any;
    getDefault(f: any): any;
    fillIn(message: string): string;
    run(urlOrScript: any, index: any, context: any, setCallback?: CBType, record?: any): Observable<any>;
    check_res(res: any, snippet: any): any;
    isInState(key: any): boolean;
    clearState(key: any): void;
    getState(key: any): any;
    setState(key: any, value: any): void;
    isCustomStep(step: any): boolean;
    doCommand(stepDo: any, uid?: any): Promise<unknown>;
    runSnippet(snippet: any): any;
}
