import { Subject } from 'rxjs';
export declare class ContentManager {
    messages: any[];
    revision: number;
    visibleRevision: number;
    inputs: Subject<any>;
    updated: Subject<any>;
    inputEnabled: boolean;
    textArea: boolean;
    inputKind: string;
    inputMin: any;
    inputMax: any;
    inputStep: any;
    inputSuggestions: any;
    inputRequired: any;
    placeholder: string;
    validator: any;
    fastScroll: boolean;
    scrollLock: boolean;
    fixme: () => void;
    debug: boolean;
    sendButtonText: string;
    inputPlaceholder: string;
    uploadFileText: string;
    uploadedFileText: string;
    notUploadedFileText: string;
    fixmeMessage: string;
    timeout: number;
    toQueue: any[];
    constructor();
    clear(): void;
    reportValue(value: any): void;
    reportUpdated(value: any): void;
    add(kind: any, params: any): void;
    queue(kind: any, params: any): void;
    queueFunction(callable: any): Promise<unknown>;
    typing(): void;
    replace(kind: any, params: any): void;
    addFrom(message: string): void;
    reportInput(value: string): void;
    queueFrom(message: string, timeout?: any): void;
    addTo(message: string, timeout?: any): void;
    addOptions(message: any, options: any[], selected?: any, multi?: boolean): void;
    addUploader(message: any, options?: any): void;
    addCustomComponent(step: any, wait: any, timeout?: any): Promise<unknown>;
    setTextArea(): void;
    setInputKind(kind: any, required?: any, min?: any, max?: any, step?: any): void;
    setInputSuggestions(suggestions: string[]): void;
    setPlaceholder(placeholder: any): void;
    setValidator(validator: any): void;
    setFixme(fixme: () => void): void;
    setFastScroll(value: boolean): void;
    setScrollLock(value: boolean): void;
    waitForInput(enableTextInput?: any): Promise<any>;
    setQueueTimeout(timeout: any): void;
}
